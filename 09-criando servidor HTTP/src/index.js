const http = require('http');
//importa o modulo http

const server =http.createServer((request,response)=>{
    //request = requisi√ß√£o
    //response = resposta
    //criando o servidor
    response.writeHead(200, {'Content-Type': 'text/html' });
    response.end('<h1>Hello world!</h1>');
});

server.listen(3000, () => console.log('üî• Server started at http://localhost:3000'));

/*Request (Requisi√ß√£o):
O objeto request representa a requisi√ß√£o recebida pelo servidor. 
Ele cont√©m informa√ß√µes enviadas pelo cliente, como o m√©todo HTTP 
utilizado, os headers (cabe√ßalhos) da requisi√ß√£o e os dados opcionais 
enviados no corpo da requisi√ß√£o. */

/*Response (Resposta):
O objeto response √© usado para enviar uma resposta ao cliente 
que fez a requisi√ß√£o. Ele permite definir o c√≥digo de status 
da resposta, os cabe√ßalhos da resposta e enviar o corpo da resposta */

/*Para execultar o servidor digitar no terminal o node mais o 
caminho dele:
 node src/index.js 
ele vai gerar o um link que podera ser clicado e o servidor 
podera ser aberto no navegador.
Em caso de atualiza√ß√£o no codigo, para o servidor atualizar ele tem que ser parado
com os comandos Ctrl+c em seguida inicializado com o node src/index.js
novamente.
*/

//explicando o codigo por completo:

/*const http = require('http');

Nesta linha, importamos o m√≥dulo http do Node.js, que fornece funcionalidades 
para criar servidores HTTP.*/

/*const server = http.createServer((request, response) => {
  // Cria o servidor e passa uma fun√ß√£o de callback que ser√° chamada para cada requisi√ß√£o
  response.writeHead(200, {'Content-Type': 'text/html' });
  response.end('<h1>Hello world!</h1>');
});

Aqui, criamos um servidor chamando a fun√ß√£o createServer() do m√≥dulo http. 
Passamos uma fun√ß√£o de callback como argumento, que ser√° chamada para cada 
requisi√ß√£o recebida pelo servidor.

Dentro da fun√ß√£o de callback, usamos response.writeHead() para definir o 
c√≥digo de status da resposta HTTP como 200 (OK) e o cabe√ßalho Content-Type como text/html. 
Isso indica que a resposta ser√° um documento HTML.

Em seguida, usamos response.end() para enviar a resposta de volta ao cliente. 
Neste caso, estamos enviando a resposta com o conte√∫do <h1>Hello world!</h1>.
*/

/*server.listen(3000, () => console.log('üî• Server started at http://localhost:3000'));

Por fim, chamamos o m√©todo listen() no objeto server para fazer o servidor come√ßar 
a escutar as requisi√ß√µes. Passamos o n√∫mero da porta (3000) em que o servidor ir√° escutar. 
Tamb√©m passamos uma fun√ß√£o de callback que ser√° chamada quando o servidor estiver pronto 
para receber conex√µes.

Dentro da fun√ß√£o de callback, usamos console.log() para exibir uma mensagem indicando 
que o servidor foi iniciado e a URL em que ele est√° rodando.

Com essas linhas de c√≥digo, voc√™ ter√° um servidor HTTP b√°sico em execu√ß√£o na porta 3000. 
Ele ir√° tratar as requisi√ß√µes e enviar a resposta "Hello world!" em formato 
HTML para cada requisi√ß√£o recebida.
*/

